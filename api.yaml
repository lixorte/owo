openapi: "3.0.0"
security: []
info:
  version: 0.0.4
  title: OWO Election Info
  license:
    name: Apache 2.0
servers:
  - url: "https://example.com/api"
paths:
  /election/getlast/{type}:
    get:
      parameters:
        - in: path
          name: type
          schema:
            type: string
            enum:
              - "song"
              - "theme"
          required: true
          description: Тип голосования
      summary: Результаты последнего голосования
      operationId: getLastElection
      tags:
        - Операции, доступные пользователю
      responses:
        "200":
          description: Последний пулл голосования
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Election"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /election/{electionUid}:
    get:
      summary: Получить информацию о голосовании по его id
      operationId: getelectionInfo
      parameters:
        - in: path
          name: electionUid
          schema:
            type: string
          required: true
          description: ID голосования
      tags:
        - Операции, доступные пользователю
      responses:
        "200":
          description: Данные о голосовании с указанным id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Election"
        "404":
          description: Нет такого голосования
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    patch:
      summary: Обновить информацию о голосовании по его id
      operationId: updateelectionInfo
      parameters:
        - in: path
          name: electionUid
          schema:
            type: string
          required: true
          description: ID голосования
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Допустимые обновления
              properties:
                name:
                  type: string
                state:
                  type: string
                  enum:
                    - "freezed"
                    - "ongoing"
                    - "finished"
      tags:
        - Операции, доступные администратору
      responses:
        "401":
          description: Ошибка авторизации
        "200":
          description: Данные обновлены
        "404":
          description: Нет такого голосования
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Удалить голосование
      operationId: deleteElection
      parameters:
        - in: path
          name: electionUid
          schema:
            type: string
          required: true
          description: ID голосования
      security:
        - JWTAuth: []
      tags:
        - Операции, доступные администратору
      responses:
        "401":
          description: Ошибка авторизации
        "200":
          description: Данные удалены
        "404":
          description: Нет такого голосования
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /election/{electionUid}/vote/{voteUid}:
    post:
      summary: Проголосовать за опцию
      operationId: makeVote
      parameters:
        - in: path
          name: electionUid
          schema:
            type: string
          required: true
          description: ID голосования
        - in: path
          name: voteUid
          schema:
            type: string
          required: true
          description: ID опции голосования
      security:
        - JWTAuth: []
      tags:
        - Операции, доступные пользователю
      responses:
        "200":
          description: Голос учтен
        "401":
          description: Ошибка авторизации
        "403":
          description: Голосование уже замороженно или вариант заблокированн
        "404":
          description: Нет такого голосования или варианта
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    patch:
      summary: Изменить опцию
      operationId: editOption
      parameters:
        - in: path
          name: electionUid
          schema:
            type: string
          required: true
          description: ID голосования
        - in: path
          name: voteUid
          schema:
            type: string
          required: true
          description: ID опции голосования
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Допустимые обновления
              properties:
                name:
                  type: string
                singer:
                  type: string
                album:
                  type: string
                state:
                  type: string
                  enum:
                    - normal
                    - banned
      tags:
        - Операции, доступные администратору

      responses:
        "200":
          description: Изменения приняты, возвращает новый обьект
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Topic"
        "401":
          description: Ошибка авторизации
        "403":
          description: Голосование уже замороженно
        "404":
          description: Нет такого голосования или варианта
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /election/new/:
    post:
      summary: Создать голосование
      operationId: createElection
      security:
        - JWTAuth: []
      tags:
        - Операции, доступные администратору
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Поля
              required:
                - name
                - type
                - state
              properties:
                name:
                  type: string
                state:
                  type: string
                  enum:
                    - "freezed"
                    - "ongoing"
                    - "finished"
                type:
                  type: string
                  enum:
                    - "topic"
                    - "song"
      responses:
        "200":
          description: Изменения приняты, возвращает новый обьект
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/electionInfo"
        "401":
          description: Ошибка авторизации
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /election/find:
    get:
      summary: Получить данные о голосованиях
      operationId: getElections
      tags:
        - Операции, доступные пользователю
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Сколько отступов отступить до сбора данных
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Количество данных для возвращения
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum:
              - topic
              - song
              - any
      responses:
        "200":
          description: Массив с карточками голосований
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/electionInfo"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /election/{electionUid}/vote/new:
    post:
      summary: Добавить опцию голосования
      operationId: addOption
      tags:
        - Операции, доступные пользователю
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: electionUid
          schema:
            type: string
          required: true
          description: ID голосования
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Поля
              required:
                - name
                - type
              properties:
                name:
                  type: string
                type:
                  type: string
                  enum:
                    - "topic"
                    - "song"
                singer:
                  type: string
                cutCommentary:
                  type: string
                album:
                  type: string
                serviceLink:
                  type: string
      responses:
        "200":
          description: Массив с карточками голосований
          content:
            application/json:
              schema:
                type: object
                description: Готовая тема или трек
                $ref: "#/components/schemas/Topic" # TODO нужен метаобьект для обьеденения темы и трека
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user:
    get:
      summary: Получить данные о пользователях
      operationId: getUsers
      tags:
        - Операции, доступные администратору
        - Операции над пользователями
      security:
        - JWTAuth: []
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Сколько отступов отступить до сбора данных
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Количество данных для возвращения
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum:
              - admin
              - normal
              - any
      responses:
        "200":
          description: Изменения приняты, возвращает новый обьект
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Ошибка авторизации
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{userName}:
    get:
      summary: Получить данные о пользователе
      operationId: getUser
      tags:
        - Операции, доступные администратору
        - Операции над пользователями
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: userUid
          required: True
          schema:
            type: string
      responses:
        "200":
          description: Обьект пользователя
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/User"
        "401":
          description: Ошибка авторизации
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Обновить данные о пользователе
      operationId: updateUser
      tags:
        - Операции, доступные администратору
        - Операции над пользователями
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: userName
          required: True
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Поля
              properties:
                type:
                  type: string
                  enum:
                    - admin
                    - normal
                state:
                  type: string
                  enum:
                    - ok
                    - banned
      responses:
        "200":
          description: Обьект пользователя
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/User"
        "401":
          description: Ошибка авторизации
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    JWTAuth:
      type: apiKey
      in: header
      name: JWT
  schemas:
    Topic:
      description: "Обьект для хранения данных о теме"
      type: object
      required:
        - name
        - votes
        - id
        - userAdded
      properties:
        name:
          type: string

        votes:
          type: integer
          format: int32

        dateAdded:
          type: string
          format: date-time

        userAdded:
          description: "Mongo ObjectID of user"
          type: string
          format: uid

        id:
          description: "Mongo ObjectId of topic"
          type: string
          format: id

    Track:
      type: object
      required:
        - name
        - singer
        - votes
        - id
        - userAdded
      properties:
        name:
          type: string

        singer:
          type: string

        album:
          type: string

        cutCommentary:
          description: "Данные о разбивке трека"
          type: string

        votes:
          type: integer
          format: int32

        userAdded:
          description: "Mongo ObjectID of user"
          type: string
          format: uid

        id:
          description: "Mongo ObjectId of song"
          type: string
          format: id

        serviceLink:
          description: "Link to YaMuic/YouTube"
          type: string
          format: url

    electionInfo:
      type: object
      required:
        - name
        - id
        - type
        - state
        - datetime
      description: "Main information about election"
      properties:
        name:
          type: string

        id:
          description: "ID of Election Collection"
          type: string
          format: id

        type:
          type: string
          enum:
            - "topic"
            - "song"

        state:
          type: string
          enum:
            - "ongoing"
            - "freezed"
            - "finished"

        datetime:
          type: string
          format: date-time

    Election:
      description: "Модель данных о выборах, с краткой информацией и участниками."
      type: object
      required:
        - electionInfo
        - normalObjects
        - bannedObjects
      properties:
        electionInfo:
          type: object
          $ref: "#/components/schemas/electionInfo"

        normalObjects:
          description: "Обычные треки, не забанные и не победившие"
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Track"
              - $ref: "#/components/schemas/Topic"

        votedObjects:
          description: "Победившние треки. Только если electionInfo.state == finished"
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Track"
              - $ref: "#/components/schemas/Topic"

        bannedObjects:
          description: "Забаненные треки"
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Track"
              - $ref: "#/components/schemas/Topic"

    User:
      description: Модель пользователя
      type: object
      required:
        - name
        - title
        - type
        - state
      properties:
        name:
          type: string
          description: ID пользователя
        type:
          type: string
          enum:
            - "admin"
            - "normal"
        state:
          type: string
          enum:
            - "ok"
            - "banned"
        title:
          type: string
          description: ФИО Юзера

    Error:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: number
